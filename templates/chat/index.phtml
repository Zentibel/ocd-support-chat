<script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-load-image/2.10.0/load-image.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/javascript-canvas-to-blob/3.6.0/js/canvas-to-blob.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/autosize.js/3.0.20/autosize.min.js"></script>


<style>
form#compose {
    width: 100%;
    border-top: 1px solid #DDD;
    position: relative;
    top: -1px;
}

textarea#compose-message, textarea#compose-message:focus {
    box-sizing: border-box;
    width: 100%;
    min-height: 40px;
    max-height: 180px;
    resize: none;
    padding: 5px;
    padding-right: 70px;
    padding-left: 35px;

    border: none;
    outline: none;
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
}

button#send-button {
    position: fixed;
    cursor: pointer;
    right: 0px;
    bottom: 0px;
    background: none;
    border: none;
    border-left: 1px solid #DDD;
    width: 70px;
    height: 50px;
    outline: none;
}

label#attach-media-button {
    display: block;
    position: fixed;
    cursor: pointer;
    left: 0px;
    bottom: 0px;
    background: none;
    border: none;
    border-right: 1px solid #DDD;
    width: 30px;
    height: 50px;
    line-height: 50px;
    text-align: center;
}

span.rounded > img.avatar {
    display: inline;
    height: 100%;
    width: auto;
    min-width: 100%;
    margin: 0 auto;
}

section#content {
    overflow-y: scroll;
}

span.timestamp {
    color: #BBB;
    float: right;
}

span.rounded {
    vertical-align: middle;
    display: inline-block;
    position: relative;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    margin: 0 auto;
    overflow: hidden;
}
div#chat-log img {
    max-width: 95%;
}
span.sender {
    margin-left: 10px;
    font-weight: bold;
    position: relative;
    top: 2px;
}

span.sender.source-gliph:after {
    content: ' (via gliph)';
    color: #BBB;
    font-weight: normal;
}

div.message a {
    word-break: break-all;
}

div.message {
    margin-left: 50px;
}

blockquote {
  background: #f9f9f9;
  border-left: 10px solid #ccc;
  margin: 1.5em 10px;
  padding: 0.5em 10px;
  quotes: "\201C""\201D""\2018""\2019";
}
blockquote:before {
  color: #ccc;
  content: open-quote;
  font-size: 4em;
  line-height: 0.1em;
  margin-right: 0.25em;
  vertical-align: -0.4em;
}
blockquote p {
  display: inline;
}

input[type="file"] {
    display: none;
}

div#pending-media {
    background-color: #FFF;
}

div#pending-media canvas, div#pending-media img {
    margin: 5px;
    max-height: 125px;
}
</style>

<section id="content">

<div id="chat-log">

</div>
</section>

<footer>

    <div id="pending-media"></div>

    <form id="compose">

        <input type="file" id="files" accept="image/*">
        <label for="files" class="stretch-height" id="attach-media-button"><i class="fa fa-plus" aria-hidden="true"></i></label>

        <textarea id="compose-message" placeholder="Don't be shy, type a message!" autocomplete="off"></textarea>

        <button class="stretch-height" id="send-button">Send &raquo;</button>

    </form>

</footer>

<script>

var ROOM_ID = 'dd0c62bd-c4f2-4286-affa-256bfcc93955';

<? if ($this->routeParam('community') == 'ocdmods'): ?>
var ROOM_ID = 'e6ddc009-a7c0-4bf9-8637-8a3da4d65825';
<? endif; ?>

<? if ($this->routeParam('community') == 'test'): ?>
var ROOM_ID = 'f68c5b32-ab99-4955-acc8-3f9f887dcf22';
<? endif; ?>

</script>

<? if ($_SERVER['HTTP_HOST'] === 'ocdchat.dev'): ?>
    <script src="/socket.io.min.js"></script>
    <script>
        var socket = io('localhost:9999');
    </script>
<? else: ?>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
    </script>
<? endif;?>

<script>
    socket.on('connect', function(){
        socket.emit('join-room', ROOM_ID);
        $('nav svg.logo, nav img.logo')
            .removeClass('disconnected')
            .addClass('connected');
    });

    socket.on('disconnect', function(){
        $('nav svg.logo')
            .removeClass('connected')
            .addClass('disconnected');
    });

    socket.on('new-message', function (data) {
        getLatestMessages(ROOM_ID);
    });

    socket.on('media-upload-progress', function (data) {
        displayMediaProgress(data.mediaId, data.percent);
    });

    socket.on('media-upload-complete', function (mediaId) {
        displayMedia(mediaId);
    });
</script>


<script>
var autolinker = new Autolinker( {
    urls : {
        schemeMatches : true,
        wwwMatches    : true,
        tldMatches    : true
    },
    email       : false,
    phone       : false,
    mention     : false,
    hashtag     : false,

    stripPrefix : false,
    newWindow   : true,

    truncate : {
        length   : 0,
        location : 'end'
    },

    className : ''
} );


var latestMessageTimestamp = 0;
var receivedMessageKeys = {};

function getLatestMessages(id) {
    $.getJSON('/messages/' + id, function(messages) {
        for (i=0; i<messages.length; i++) {
            var message = messages[i];
            if (!message
             || receivedMessageKeys[message.key]
             || message.timestamp < latestMessageTimestamp
             || message.senderName == 'ocdbot'
            ) {
                continue;
            }
            latestMessageTimestamp = message.timestamp;
            receivedMessageKeys[message.key] = true;

            var mTimestamp     = moment.unix(message.timestamp);
            var timeDisplay    = mTimestamp.fromNow();
            var timeDisplayAlt = mTimestamp.format('YYYY-MM-DD HH:mm:ss');

            var messageRendered = autolinker.link(markdown.toHTML(message.message));

            $('#chat-log').append(
                '<span class="rounded"><img class="avatar" src="' + message.senderAvatar + '"></span>' +
                '<span class="timestamp" data-timestamp="'+message.timestamp+'" title="'+timeDisplayAlt+'">' + timeDisplay + '</span>' +
                '<span class="sender source-'+ message.source +'">' + message.senderName + ':</span> ' +
               '<div class="message">'+ messageRendered + '</div>'
            );
            if (message.media && message.source =='gliph') {
                for (j=0; j<message.media.length; j++) {
                    $('#chat-log').append('<div class="message"><img src="' + message.media[j].thumbnail + '"></div>');
                }
            }
            if (message.media && message.source =='native') {
                for (j=0; j<message.media.length; j++) {
                    var parts = message.media[j].split('.');
                    var div = $('<div class="message media"><span class="loaded"></span></div>');
                    var img = $('<img alt="Loading..." class="chat-media '+parts[1]+'" id="'+parts[0]+'" data-src="/uploads/default/' + message.media[j] + '">');
                    img.attr('src', img.data('src'));
                    $('#chat-log').append(div.append(img));
                }
            }

        }
        setTimeout(function(){ updateScroll('content'); }, 100);
    });
};

function displayMediaProgress(mediaId, percent) {
    percentRounded = Math.round(percent);
    $('img#'+mediaId).parent().find('span.loaded').text(percentRounded + '%');
};

function displayMedia(mediaId) {
    //var mediaId = e.target;
    var $img    = $('img#'+mediaId);
    $img.removeAttr('src').attr('src', $img.data('src'));
    $img.parent().find('span.loaded').remove();
};

function announceMediaProgress(e) {
    socket.emit('media-upload-progress', e.target);
};

function announceMediaReady(e) {
    socket.emit('media-upload-complete', e.target);
};

EventBus.addEventListener('chat:media-upload-complete', announceMediaReady);
EventBus.addEventListener('chat:media-upload-progress', announceMediaProgress);

//EventBus.addEventListener('chat:media-upload-complete', displayMedia);


setInterval(function(){
    $('span.timestamp').each(function() {
        mTimestamp = moment.unix($(this).data('timestamp'));
        $(this).text(mTimestamp.fromNow());
    });
}, 60000);

function updateScroll(el) {
    var element = document.getElementById(el);
    element.scrollTop = element.scrollHeight;
}
updateScroll('content');

EventBus.addEventListener('window:resize', function() {
    updateScroll('content');
});

function sendMessage(mediaFiles) {
     $.post('/messages/' + ROOM_ID, { message: $('#compose-message').val(), media: mediaFiles }, function(result) {
         $('#compose-message').removeAttr('disabled');
         $('#compose-message').val('');
         $('button#send-button').removeAttr('disabled');
         $('button#send-button').html('Send &raquo;');
         $('#pending-media').html('');
         autosize.update($('#compose-message'));
         $('#compose-message').focus();
     });
}

$(document).ready(function() {
    $('#compose-message').focus();

    $('#compose-message').each(function() {
        autosize(this);
    }).on('autosize:resized', function() {
        newHeight = $('form#compose').height() + 1;
        $('.stretch-height').css('height', newHeight + 'px');
        $('.stretch-height').css('line-height', newHeight + 'px');
        updateScroll('content');
    });

    getLatestMessages(ROOM_ID);

    $('form#compose').submit(function(event) {

        event.preventDefault();

        if (mediaBlobs.length == 0 && !$('#compose-message').val().trim()) {
            return;
        }

        $('#compose-message').attr('disabled','disabled');
        $('#send-button').attr('disabled','disabled');

        if (mediaBlobs.length > 0) {

            var mediaManager = new MediaManager();
            mediaManager.addBlobs(mediaBlobs, function(media) {
                sendMessage(this.getMediaFilenames());
                mediaBlobs = [];
                this.upload();
            });

            return;
        }

        if (!$('#compose-message').val().trim()) {
            return;
        }

        sendMessage(false);

    });

});


var shiftDown = false;
var chatForm = $("#compose");
var messageBox = chatForm.children("textarea");

$(document).keypress(function (e) {
    if(e.keyCode == 13) {
        if(messageBox.is(":focus") && !shiftDown) {
            e.preventDefault(); // prevent another \n from being entered
            chatForm.submit();
        }
    }
});

$(document).keydown(function (e) {
    if(e.keyCode == 16) shiftDown = true;
});

$(document).keyup(function (e) {
    if(e.keyCode == 16) shiftDown = false;
});


var mediaBlobs = [];

function handleFileSelect(evt) {
    var file = evt.target.files[0];
    console.log(file);

    if (file.type == 'image/gif') {

        mediaBlobs.push(file);
        console.log(mediaBlobs);

        var reader = new FileReader();
         reader.onload = function (e) {
             $('div#pending-media').append(
                 $('<img src="'+e.target.result+'">')
             );
             updateScroll('content');
         }
         reader.readAsDataURL(file);
    } else {
        loadImage(
            file,
            function (img) {
                $('div#pending-media').append(img);
                updateScroll('content');
                img.toBlob(function (blob) {
                        mediaBlobs.push(blob);
                        console.log(mediaBlobs);
                }, 'image/jpeg');
            },
            {
                maxWidth: 700,
                maxHeight: 500,
                canvas: true
            }
        );
    }

    $('#compose-message').focus();
}

document.getElementById('files').addEventListener('change', handleFileSelect, false);

</script>
