  <main id="content" class="mdl-layout__content stretch">
    <div class="mdl-progress mdl-js-progress mdl-progress__indeterminate"></div>
    <div id="chat-log">
    </div>
  </main>

  <footer class="mdl-mega-footer footer-light mdl-shadow--8dp">
    <form id="compose">
    <div id="pending-media"></div>

    <div class="mdl-grid">

        <div class="attach mdl-button mdl-js-button mdl-js-ripple-effect">
          <label id="attach-media-button" for="files"></label>
          <input type="file" id="files" accept="image/*">
          <i class="material-icons">attach_file</i>
        </div>

        <textarea id="compose-message" placeholder="Message" autocomplete="off"></textarea>

        <button class="send mdl-button mdl-js-button mdl-js-ripple-effect">
          <i class="material-icons">send</i>
        </button>
    </div>


    </form>

  </footer>

<script src="https://cdnjs.cloudflare.com/ajax/libs/markdown.js/0.5.0/markdown.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/autolinker/1.4.0/Autolinker.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-load-image/2.10.0/load-image.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/javascript-canvas-to-blob/3.6.0/js/canvas-to-blob.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/autosize.js/3.0.20/autosize.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.imagesloaded/4.1.1/imagesloaded.pkgd.min.js"></script>

<script src="/chat.js?1"></script>

<? if ($_SERVER['HTTP_HOST'] === 'ocdchat.dev'): ?>
    <script src="/socket.io.min.js"></script>
    <script>
        var socket = io('localhost:9999');
    </script>
<? else: ?>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
    </script>
<? endif;?>

<script>

var ROOM_ID = 'dd0c62bd-c4f2-4286-affa-256bfcc93955';

<? if ($this->routeParam('community') == 'ocdmods'): ?>
    var ROOM_ID = 'e6ddc009-a7c0-4bf9-8637-8a3da4d65825';
<? endif; ?>

<? if ($this->routeParam('community') == 'test'): ?>
    var ROOM_ID = 'f68c5b32-ab99-4955-acc8-3f9f887dcf22';
<? endif; ?>


var thisChat = new Chat(ROOM_ID);

var logoConnected = function() {
    setTimeout(function(){
    $('svg.logo')
        .removeClass('disconnected')
        .addClass('connected');
    }, 500);
}
var logoDisconnected = function() {
    $('svg.logo')
        .removeClass('connected')
        .addClass('disconnected');
}

socket.on('connect', function(){
    socket.emit('join-room', ROOM_ID);
    logoConnected();
});

socket.on('disconnect', function(){
    logoDisconnected();
});

socket.on('new-message', function (data) {
    thisChat.loadMessages(3); // todo implement 'since'
});

socket.on('media-upload-progress', function (data) {
    displayMediaProgress(data.mediaId, data.percent);
});

socket.on('media-upload-complete', function (mediaId) {
    displayMedia(mediaId);
});

var autolinker = new Autolinker( {
    urls : {
        schemeMatches : true,
        wwwMatches    : true,
        tldMatches    : true
    },
    email       : false,
    phone       : false,
    mention     : false,
    hashtag     : false,

    stripPrefix : false,
    newWindow   : true,

    truncate : {
        length   : 0,
        location : 'end'
    },

    className : ''
} );


var billy = new Audio('/bleat.mp3');

EventBus.addEventListener('chat:message-loaded', renderMessage);

function renderMessage(event, message) {
    if (message.senderName == 'ocdbot') {
        return;
    }

    var mTimestamp      = moment.unix(message.timestamp);
    var timeDisplay     = mTimestamp.fromNow();
    var timeDisplayAlt  = mTimestamp.format('YYYY-MM-DD HH:mm:ss');
    var messageRendered = autolinker.link(markdown.toHTML(message.message));

    var $message = $('<div class="chat-message" id="'+message.id+'"></div>');

    tsId = 'ts-' + message.timestamp.replace(/\./,'');
    $message.append(
        '<span class="rounded"><img class="avatar" src="' + message.senderAvatar + '"></span>' +
        '<span class="timestamp" id="'+tsId+'" data-timestamp="'+message.timestamp+'">' + timeDisplay + '</span>' +
        '<div class="mdl-tooltip mdl-tooltip--large" for="'+tsId+'">' +
            timeDisplayAlt +
        '</div>' +
        '<span class="sender source-'+ message.source +'">' + message.senderName + ':</span> ' +
       '<div class="message">'+ messageRendered + '</div>'
    );
    if (message.media && message.source =='gliph') {
        for (var j=0; j<message.media.length; j++) {
            $message.append('<div class="message"><img src="' + message.media[j].thumbnail + '"></div>');
        }
    }
    if (message.media && message.source =='native') {
        for (var i=0; i<message.media.length; i++) {
            var parts = message.media[i].split('.');
            var $div = $('<div class="message media"><span class="loaded"></span></div>');
            var $img = $('<img alt="Loading..." class="chat-media '+parts[1]+'" id="'+parts[0]+'" data-src="/uploads/default/' + message.media[i] + '">');
            $img.attr('src', $img.data('src'));
            $message.append($div.append($img));
        }
    }

    var sortval = parseFloat(message.timestamp);
    var $first = $('.chat-message').first();

    $message.imagesLoaded().progress(function(instance, image) {
        if (image.isLoaded) {
            EventBus.dispatch('chat:message-media-loaded', $message, image);
        }
    });

    if ($first.length === 0) {
        $('#chat-log').append($message);
        EventBus.dispatch('chat:first-message-rendered');
        return;
    }

    if (sortval <= $first.find('span.timestamp').data('timestamp')) {
        $message.insertBefore($first);
        EventBus.dispatch('chat:message-prepended');
        return;

    }

    var $last = $('.chat-message').last();
    if (sortval >= $last.find('span.timestamp').data('timestamp')) {
        $message.insertAfter($last);
        EventBus.dispatch('chat:message-appended');
        billy.play();
        return;
    }

    // Binary search to find correct position for the message.
    var count = 0;
    var $messages = $('.chat-message');
    do {
       var index = parseInt($message.length / 2)
       var $compare = $message.eq(index);
       var compare = $compare.data('timestamp');
       if (sortval === compare) {
          break; // hmmm
       } else if (sortval < compare) {
          $messages = $messages.slice(index, $messages.length);
       } else {
          $messages = $messages.slice(0, index);
       }
    } while ($messages.length > 1);

    if (sortval === compare || sortval > compare) {
        $message.insertAfter($compare);
    } else {
        $message.insertBefore($compare);
    }
    console.log('Binary-inserted message');
}

function displayMediaProgress(mediaId, percent) {
    percentRounded = Math.round(percent);
    $('img#'+mediaId).parent().find('span.loaded').text(percentRounded + '%');
};

function displayMedia(mediaId) {
    //var mediaId = e.target;
    var $img    = $('img#'+mediaId);
    $img.removeAttr('src').attr('src', $img.data('src'));
    $img.parent().find('span.loaded').remove();
};

function announceMediaProgress(e) {
    socket.emit('media-upload-progress', e.target);
};

function announceMediaReady(e) {
    socket.emit('media-upload-complete', e.target);
};

EventBus.addEventListener('chat:media-upload-complete', announceMediaReady);
EventBus.addEventListener('chat:media-upload-progress', announceMediaProgress);

setInterval(function(){
    $('span.timestamp').each(function() {
        mTimestamp = moment.unix($(this).data('timestamp'));
        $(this).text(mTimestamp.fromNow());
    });
}, 60000);

function updateScroll(el) {
    var element = document.getElementById(el);
    element.scrollTop = element.scrollHeight;
}

EventBus.addEventListener('window:resize', function() {
    updateScroll('content');
});

function sendMessage(mediaFiles) {
     $.post('/messages/' + ROOM_ID, { message: $('#compose-message').val(), media: mediaFiles }, function(result) {
         $('#compose-message').removeAttr('disabled');
         $('#compose-message').val('');
         $('button#send-button').removeAttr('disabled');
         $('button#send-button').html('Send &raquo;');
         $('#pending-media').html('');
         autosize.update($('#compose-message'));
         $('#compose-message').focus();
     });
}

$(document).ready(function() {

    thisChat.loadMessages(20);

    $('#compose-message').each(function() {
        autosize(this);
    }).on('autosize:resized', function() {
        newHeight = $('form#compose').height() + 1;
        $('.stretch-height').css('height', newHeight + 'px');
        $('.stretch-height').css('line-height', newHeight + 'px');
        updateScroll('content');
    });


});

$('form#compose').submit(function(event) {

    event.preventDefault();

    if (mediaBlobs.length == 0 && !$('#compose-message').val().trim()) {
        return;
    }

    $('#compose-message').attr('disabled','disabled');
    $('#send-button').attr('disabled','disabled');

    if (mediaBlobs.length > 0) {

        var mediaManager = new MediaManager();
        mediaManager.addBlobs(mediaBlobs, function(media) {
            sendMessage(this.getMediaFilenames());
            mediaBlobs = [];
            this.upload();
        });

        return;
    }

    if (!$('#compose-message').val().trim()) {
        return;
    }

    sendMessage(false);

});


var shiftDown = false;
var chatForm = $("#compose");
var messageBox = $('#compose-message');

$(document).keypress(function (e) {
    if(e.keyCode == 13) {
        if(messageBox.is(":focus") && !shiftDown) {
            e.preventDefault(); // prevent another \n from being entered
            chatForm.submit();
        }
    }
});

$(document).keydown(function (e) {
    if(e.keyCode == 16) shiftDown = true;
});

$(document).keyup(function (e) {
    if(e.keyCode == 16) shiftDown = false;
});


var mediaBlobs = [];

function handleFileSelect(evt) {
    var file = evt.target.files[0];
    console.log(file);

    if (file.type == 'image/gif') {

        mediaBlobs.push(file);
        console.log(mediaBlobs);

        var reader = new FileReader();
         reader.onload = function (e) {
             $('div#pending-media').append(
                 $('<img src="'+e.target.result+'">')
             );
             updateScroll('content');
         }
         reader.readAsDataURL(file);
    } else {
        loadImage(
            file,
            function (img) {
                $('div#pending-media').append(img);
                updateScroll('content');
                img.toBlob(function (blob) {
                        mediaBlobs.push(blob);
                        console.log(mediaBlobs);
                }, 'image/jpeg');
            },
            {
                maxWidth: 700,
                maxHeight: 500,
                canvas: true
            }
        );
    }

    $('#compose-message').focus();
}

document.getElementById('files').addEventListener('change', handleFileSelect, false);

$(document).on('wake', function() {
    console.log('Waking up...');
    EventBus.addEventListener('chat:messages-loaded', firstMessagesLoaded);
    scrollLock = true;
    $('#chat-log').hide().html('');
    $('main#content .mdl-progress').removeClass('off');
    componentHandler.upgradeDom();
    thisChat.reset();
    // just reset the message log?
    thisChat.loadMessages(20);
});

/**
 * Manage scrolling...
 */
var scrollToBottom = function() {
    updateScroll('content');
}

var holdCurrentScrollPos = function(event) {
    if (!scrollLock) {
        return;
    }

    var newPosition = $('#content').scrollTop() + $topMessage.offset().top - $topMessage.outerHeight() - 20;

    $('#content').scrollTop(newPosition);
}

var $topMessage = false;
var scrollLock = false;

var finishedLoadingOldMessages = function() {
    $('main#content .mdl-progress').addClass('off');
    EventBus.removeEventListener('chat:messages-loaded', finishedLoadingOldMessages);
    // Probably buggy if any images take over 250ms to load.
    // TODO: Find a way to trigger a real event once all media is loaded.
    setTimeout(function() {
        scrollLock = false;
        EventBus.removeEventListener('chat:message-loaded', holdCurrentScrollPos);
        EventBus.removeEventListener('chat:message-media-loaded', holdCurrentScrollPos);
    }, 250);
}

var chatLogScrolled = function() {
    if (scrollLock || this.scrollTop >= 1) {
        return;
    }

    console.log('Reached top. Loading more messages...');

    $('main#content .mdl-progress').removeClass('off');

    EventBus.addEventListener('chat:message-prepended', holdCurrentScrollPos);
    EventBus.addEventListener('chat:message-media-loaded', holdCurrentScrollPos);
    EventBus.addEventListener('chat:messages-loaded', finishedLoadingOldMessages);
    setTimeout(function() {
        $topMessage = $('.chat-message').first();
        scrollLock  = true;
        var before  = $('.chat-message').first().find('span.timestamp').data('timestamp');
        thisChat.loadMessages(20, before);
    }, 500);
}

var firstMessagesLoaded = function() {
    console.log('Messages loaded!');
    $('main#content > .mdl-progress').addClass('off');
    setTimeout(function() {
        $('#chat-log').fadeIn();
        scrollToBottom();
    }, 250);
    componentHandler.upgradeDom();
    EventBus.removeEventListener('chat:messages-loaded', firstMessagesLoaded);
    scrollLock = false;
    $('main#content').on('scroll', chatLogScrolled);
}

EventBus.addEventListener('chat:messages-loaded', firstMessagesLoaded);
EventBus.addEventListener('chat:message-appended', scrollToBottom);
EventBus.addEventListener('chat:message-appended', function() { componentHandler.upgradeDom(); });

</script>
